{"version":3,"sources":["json-data.js","emitter.js","App.js","serviceWorker.js","index.js"],"names":["json","categorymembers","pageid","ns","title","categorymembers2","categorymembers3","categorymembers4","categorymembers5","test","test2","eventEmitter","EventEmitter","Emitter","on","event","fn","once","off","emit","payload","Object","freeze","JsonViewer","props","state","hiddenItems","Set","isAllTreeVisible","onChangeBranchVisibility","bind","onChangeTreeVisibility","data","this","renderListFromObject","obj","list","prop","hasOwnProperty","isEmpty","key","itemContent","renderBranch","push","arr","length","forEach","value","index","valueData","isParent","Array","isArray","renderListFromArray","name","isVisible","branchName","newData","delete","setState","add","onHiddenItemsChange","isHiddenItems","size","className","onClick","newState","renderToggleButton","renderTree","React","Component","JsonBranch","onChangeVisibility","newValue","stopPropagation","renderVisibilityIndicator","hidden","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.214d7518.chunk.js","sourcesContent":["export const json = {\r\n  categorymembers: [\r\n    {\r\n      pageid: 9845,\r\n      ns: 0,\r\n      title: \"JavaScript\"\r\n    },\r\n    {\r\n      pageid: 53741908,\r\n      ns: 0,\r\n      title: \"Index of JavaScript-related articles\"\r\n    }\r\n  ],\r\n  categorymembers2: [],\r\n  categorymembers3: {},\r\n  categorymembers4: null,\r\n  categorymembers5: {\r\n    test: \"test\",\r\n    test2: \"test2\"\r\n  }\r\n};\r\n","import EventEmitter from 'eventemitter3';\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst Emitter = {\r\n  on: (event, fn) => eventEmitter.on(event, fn),\r\n  once: (event, fn) => eventEmitter.once(event, fn),\r\n  off: (event, fn) => eventEmitter.off(event, fn),\r\n  emit: (event, payload) => eventEmitter.emit(event, payload)\r\n}\r\n\r\nObject.freeze(Emitter);\r\n\r\nexport default Emitter;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { json } from \"./json-data\";\r\nimport Emitter from './emitter';\r\n\r\nfunction isEmpty(obj) {\r\n  for (var prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nconst CHANGE_TREE_VISIBILITY = \"CHANGE_TREE_VISIBILITY\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>JSON view app</h1>\r\n      <JsonViewer data={json}></JsonViewer>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass JsonViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hiddenItems: new Set(),\r\n      isAllTreeVisible: true\r\n    };\r\n\r\n    this.onChangeBranchVisibility = this.onChangeBranchVisibility.bind(this);\r\n    this.onChangeTreeVisibility = this.onChangeTreeVisibility.bind(this);\r\n  }\r\n\r\n  renderTree() {\r\n    const { data } = this.props;\r\n\r\n    if (!data) {\r\n      return <p>no data provided!</p>;\r\n    }\r\n\r\n    return this.renderListFromObject(data);\r\n  }\r\n\r\n  renderListFromObject(obj) {\r\n    const list = [];\r\n\r\n    if (isEmpty(obj)) return \"{}\";\r\n\r\n    for (const key in obj) {\r\n      const itemContent = this.renderBranch(key, obj[key]);\r\n      list.push(itemContent);\r\n    }\r\n\r\n    return <ul>{list}</ul>;\r\n  }\r\n\r\n  renderListFromArray(arr) {\r\n    const list = [];\r\n\r\n    if (!arr.length) return \"[]\";\r\n\r\n    arr.forEach((value, index) => {\r\n      const itemContent = this.renderBranch(index, value);\r\n      list.push(itemContent);\r\n    });\r\n\r\n    return <ul>{list}</ul>;\r\n  }\r\n\r\n  renderBranch(key, value) {\r\n    let valueData;\r\n    let isParent = false;\r\n\r\n    if (!value) {\r\n      valueData = \"\";\r\n    }\r\n    if (Array.isArray(value)) {\r\n      valueData = this.renderListFromArray(value);\r\n      isParent = true;\r\n    } else if (typeof value === \"object\") {\r\n      valueData = this.renderListFromObject(value);\r\n      isParent = true;\r\n    } else {\r\n      valueData = `${value}`;\r\n    }\r\n\r\n    return (\r\n      <JsonBranch\r\n        name={key}\r\n        value={valueData}\r\n        isParent={isParent}\r\n        onChangeBranchVisibility={this.onChangeBranchVisibility}\r\n      ></JsonBranch>\r\n    );\r\n  }\r\n\r\n  onChangeBranchVisibility(isVisible, branchName) {\r\n    const { hiddenItems } = this.state;\r\n    let newData;\r\n\r\n    if (!isVisible) {\r\n      newData = hiddenItems.add(branchName);\r\n      this.setState({ hiddenItems: newData });\r\n    } else {\r\n      newData = new Set(hiddenItems);\r\n      newData.delete(branchName);\r\n      this.setState({ hiddenItems: newData });\r\n    }\r\n    this.onHiddenItemsChange(newData);\r\n  }\r\n\r\n  onHiddenItemsChange(hiddenItems) {\r\n    const isHiddenItems = hiddenItems.size;\r\n    this.setState({ isAllTreeVisible: !isHiddenItems });\r\n  }\r\n\r\n  renderToggleButton() {\r\n    const { isAllTreeVisible } = this.state;\r\n\r\n    return (\r\n      <button className=\"toggleTreeBtn\" onClick={this.onChangeTreeVisibility}>\r\n        {isAllTreeVisible ? \"Collapse\" : \"Expand\"} all\r\n      </button>\r\n    );\r\n  }\r\n\r\n  onChangeTreeVisibility() {\r\n    const newState = !this.state.isAllTreeVisible;\r\n    this.setState({ isAllTreeVisible: newState });\r\n    Emitter.emit(CHANGE_TREE_VISIBILITY, newState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        {this.renderToggleButton()}\r\n        {this.renderTree()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass JsonBranch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { isVisible: true };\r\n\r\n    this.onChangeVisibility = this.onChangeVisibility.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    Emitter.on(CHANGE_TREE_VISIBILITY, (newValue) => {\r\n      if (this.state.isVisible !== newValue) {\r\n        this.setState({ isVisible: newValue });\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    Emitter.off(CHANGE_TREE_VISIBILITY);\r\n  }\r\n\r\n  onChangeVisibility(event) {\r\n    event.stopPropagation();\r\n    if (!this.props.isParent) return;\r\n    const newState = !this.state.isVisible;\r\n\r\n    this.props.onChangeBranchVisibility(newState, this.props.name);\r\n    this.setState({ isVisible: newState });\r\n  }\r\n\r\n  renderVisibilityIndicator() {\r\n    const { isParent } = this.props;\r\n    const { isVisible } = this.state;\r\n\r\n    return isParent ? <button className=\"toggleBranchBtn\">{isVisible ? \"-\" : \"+\"} </button> : null;\r\n  }\r\n\r\n  render() {\r\n    const { name, value, isParent } = this.props;\r\n    const { isVisible } = this.state;\r\n\r\n    return (\r\n      <li>\r\n        <span className={isParent ? 'parent' : ''} onClick={this.onChangeVisibility}>\r\n          {this.renderVisibilityIndicator()}\r\n          {name}: \r\n        </span>\r\n        <span hidden={!isVisible}>\r\n          {value}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}